<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>23种设计模式的概述</title>
      <link href="2020/05/15/23-chong-she-ji-mo-shi/"/>
      <url>2020/05/15/23-chong-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>设计模式有两种分类方法，即根据模式的目的来分和根据模式的作用的范围来分。</p><h2 id="1-根据目的来分"><a href="#1-根据目的来分" class="headerlink" title="1. 根据目的来分"></a>1. 根据目的来分</h2><p>根据模式是用来完成什么工作来划分，这种方式可分为创建型模式、结构型模式和行为型模式 3 种。<br>创建型模式：用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF 中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。<br>结构型模式：用于描述如何将类或对象按某种布局组成更大的结构，GoF 中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。<br>行为型模式：用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。GoF 中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</p><h2 id="2-根据作用范围来分"><a href="#2-根据作用范围来分" class="headerlink" title="2. 根据作用范围来分"></a>2. 根据作用范围来分</h2><p>根据模式是主要用于类上还是主要用于对象上来分，这种方式可分为类模式和对象模式两种。<br>类模式：用于处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻便确定下来了。GoF中的工厂方法、（类）适配器、模板方法、解释器属于该模式。<br>对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。GoF 中除了以上 4 种，其他的都是对象模式。</p><p>下表介绍了这 23 种设计模式的分类。<br><a href="https://imgchr.com/i/D2xfpj"><img src="https://s3.ax1x.com/2020/11/30/D2xfpj.png" alt="D2xfpj.png"></a></p><h2 id="3-GoF的23种设计模式的功能"><a href="#3-GoF的23种设计模式的功能" class="headerlink" title="3. GoF的23种设计模式的功能"></a>3. GoF的23种设计模式的功能</h2><p>前面说明了 GoF 的 23 种设计模式的分类，现在对各个模式的功能进行介绍。</p><h3 id="3-1-单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。"><a href="#3-1-单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。" class="headerlink" title="3.1 单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。"></a>3.1 单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</h3><h3 id="3-2-原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。"><a href="#3-2-原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。" class="headerlink" title="3.2 原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。"></a>3.2 原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。</h3><h3 id="3-3-工厂方法（Factory-Method）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。"><a href="#3-3-工厂方法（Factory-Method）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。" class="headerlink" title="3.3 工厂方法（Factory Method）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。"></a>3.3 工厂方法（Factory Method）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。</h3><h3 id="3-4-抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。"><a href="#3-4-抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。" class="headerlink" title="3.4 抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。"></a>3.4 抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。</h3><h3 id="3-5-建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。"><a href="#3-5-建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。" class="headerlink" title="3.5 建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。"></a>3.5 建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。</h3><h3 id="3-6-代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。"><a href="#3-6-代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。" class="headerlink" title="3.6 代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。"></a>3.6 代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</h3><h3 id="3-7-适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。"><a href="#3-7-适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。" class="headerlink" title="3.7 适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。"></a>3.7 适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</h3><h3 id="3-8-桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。"><a href="#3-8-桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。" class="headerlink" title="3.8 桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。"></a>3.8 桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</h3><h3 id="3-9-装饰（Decorator）模式：动态的给对象增加一些职责，即增加其额外的功能。"><a href="#3-9-装饰（Decorator）模式：动态的给对象增加一些职责，即增加其额外的功能。" class="headerlink" title="3.9 装饰（Decorator）模式：动态的给对象增加一些职责，即增加其额外的功能。"></a>3.9 装饰（Decorator）模式：动态的给对象增加一些职责，即增加其额外的功能。</h3><h3 id="3-10-外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。"><a href="#3-10-外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。" class="headerlink" title="3.10 外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。"></a>3.10 外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。</h3><h3 id="3-11-享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。"><a href="#3-11-享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。" class="headerlink" title="3.11 享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。"></a>3.11 享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。</h3><h3 id="3-12-组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。"><a href="#3-12-组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。" class="headerlink" title="3.12 组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。"></a>3.12 组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。</h3><h3 id="3-13-模板方法（TemplateMethod）模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。"><a href="#3-13-模板方法（TemplateMethod）模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。" class="headerlink" title="3.13 模板方法（TemplateMethod）模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。"></a>3.13 模板方法（TemplateMethod）模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</h3><h3 id="3-14-策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。"><a href="#3-14-策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。" class="headerlink" title="3.14 策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。"></a>3.14 策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。</h3><h3 id="3-15-命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。"><a href="#3-15-命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。" class="headerlink" title="3.15 命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。"></a>3.15 命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。</h3><h3 id="3-16-职责链（Chain-of-Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。"><a href="#3-16-职责链（Chain-of-Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。" class="headerlink" title="3.16 职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。"></a>3.16 职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。</h3><h3 id="3-17-状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。"><a href="#3-17-状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。" class="headerlink" title="3.17 状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。"></a>3.17 状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。</h3><h3 id="3-18-观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。"><a href="#3-18-观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。" class="headerlink" title="3.18 观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。"></a>3.18 观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</h3><h3 id="3-19-中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。"><a href="#3-19-中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。" class="headerlink" title="3.19 中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。"></a>3.19 中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。</h3><h3 id="3-20-迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。"><a href="#3-20-迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。" class="headerlink" title="3.20 迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。"></a>3.20 迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</h3><h3 id="3-21-访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。"><a href="#3-21-访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。" class="headerlink" title="3.21 访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。"></a>3.21 访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。</h3><h3 id="3-22-备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。"><a href="#3-22-备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。" class="headerlink" title="3.22 备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。"></a>3.22 备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。</h3><h3 id="3-23-解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。"><a href="#3-23-解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。" class="headerlink" title="3.23 解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。"></a>3.23 解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端的三列布局</title>
      <link href="2020/05/15/san-lie-bu-ju/"/>
      <url>2020/05/15/san-lie-bu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="三列布局"><a href="#三列布局" class="headerlink" title="三列布局"></a>三列布局</h1><h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><pre><code>这得从去年我12月毕业去面试说起，学了三年前端，终于可以出山了。怀着无比激动投了上百份简历，命中率60%。虽说战果还是可以的，但是在近百场面试中，确实让我收获颇多，此文写于对前端的面试中发现自己的不足，查漏补缺，更加让自己的技术更加成熟，发现自己不足，从中明白自己的缺失。同时也希望也能帮助各位江湖中人解惑。</code></pre><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><pre><code>这里所要介绍的布局知识主要是在解决三列布局模式而出现的几种布局解法，其中包含了经典的圣杯布局，双飞翼布局，绝对定位的布局方式，还包含2009年W3C所提出的Flex布局方式和以CSS3所带来的calc计算函数来解决三列布局的方式</code></pre><h2 id="三列布局解决方法"><a href="#三列布局解决方法" class="headerlink" title="三列布局解决方法"></a>三列布局解决方法</h2><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><blockquote><p>由来：2006 年 Matthew Levine 在 《A LIST APART》 &gt; 上发表了一篇名为 《In Search of the Holy Grail》 &gt; 的文章，提出了 圣杯布局 的思路。利用 负外边距 来实现&gt; 我们需要的效果，充分体现了 CSS的艺术 与 负外边距 的强&gt; 大。</p></blockquote><blockquote><p>原理: 利用float浮动和定位、负边框，实现两边固定，中间<br>自适应的三栏布局</p></blockquote><h3 id="具体实现（采用html5和css3的语义化实现）"><a href="#具体实现（采用html5和css3的语义化实现）" class="headerlink" title="具体实现（采用html5和css3的语义化实现）"></a>具体实现（采用html5和css3的语义化实现）</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- header start --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- header end --&gt;</span>    <span class="token comment">&lt;!-- main start --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- main end --&gt;</span>    <span class="token comment">&lt;!-- footer start --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span>footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- footer end --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* header */</span><span class="token selector">header</span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #5dbb79<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* main */</span><span class="token selector">main</span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0 200px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">main .main</span><span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>400px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>73<span class="token punctuation">,</span> 182<span class="token punctuation">,</span> 176<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">main .left</span><span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>131<span class="token punctuation">,</span> 124<span class="token punctuation">,</span> 104<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">main .right</span><span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>131<span class="token punctuation">,</span> 124<span class="token punctuation">,</span> 104<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* footer */</span><span class="token selector">footer</span> <span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token comment">/*clear属性清除content内的浮动元素透出来 */</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>210<span class="token punctuation">,</span> 209<span class="token punctuation">,</span> 208<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果图如下"><a href="#效果图如下" class="headerlink" title="效果图如下"></a>效果图如下</h3><p><a href="https://imgchr.com/i/DIKdKJ"><img src="https://s3.ax1x.com/2020/12/02/DIKdKJ.png" alt="DIKdKJ.png"></a></p><h3 id="缺陷图如下"><a href="#缺陷图如下" class="headerlink" title="缺陷图如下"></a>缺陷图如下</h3><p><a href="https://imgchr.com/i/DIKUv4"><img src="https://s3.ax1x.com/2020/12/02/DIKUv4.png" alt="DIKUv4.png"></a></p><h3 id="该布局存优缺点"><a href="#该布局存优缺点" class="headerlink" title="该布局存优缺点"></a>该布局存优缺点</h3><p>优点：可以左右拉伸，内容区域为自动缩放，符合早期的传统三列布局<br>缺点：当缩放当一定程度，会发现整个页面结构将会紊乱。这个问题用现在可以用到css3的mi-width可以解决。</p><hr><h2 id="圣杯双飞翼布局"><a href="#圣杯双飞翼布局" class="headerlink" title="圣杯双飞翼布局"></a>圣杯双飞翼布局</h2><blockquote><p>由来：双飞翼布局是圣杯布局演化而来的，且是旨在要解决圣&gt; 杯布局所遇到的问题，即缩小到一定程度后页面布局依旧正&gt; &gt; 常，因为代码和圣杯基本一致，只是结构略有差异，这里不一&gt; 步一步拆解。</p></blockquote><blockquote><p>原理: 利用float浮动和定位、负边框，实现两边固定，中间增加了 dom 结构，增加了一个层级。确实解决了圣杯布局的缺陷,自适应的三栏布局</p></blockquote><h3 id="具体实现（采用html5和css3的语义化实现）-1"><a href="#具体实现（采用html5和css3的语义化实现）-1" class="headerlink" title="具体实现（采用html5和css3的语义化实现）"></a>具体实现（采用html5和css3的语义化实现）</h3><pre><code>本布局采用html的pug模板和css的scss编写，运用pug和scss易于版本的控制和维护，用少量的代码做更多的事。</code></pre><p>###pug代码如下</p><pre class="line-numbers language-pug" data-language="pug"><code class="language-pug"><span class="token markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span><span class="token tag">html<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">lang</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"en"</span></span><span class="token punctuation">)</span></span></span>    <span class="token tag">head</span>        <span class="token tag">meta<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">charset</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"UTF-8"</span></span><span class="token punctuation">)</span></span></span>        <span class="token tag">meta<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"viewport"</span></span><span class="token punctuation">,</span> <span class="token attr-name">content</span><span class="token punctuation">=</span><span class="token attr-value">"width<span class="token operator">=</span>device<span class="token operator">-</span>width</span><span class="token punctuation">,</span> <span class="token attr-name">initial-scale</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token number">1.0</span>"</span><span class="token punctuation">)</span></span></span>        <span class="token tag">title</span> <span class="token plain-text">圣杯双飞翼布局</span>        <span class="token tag">link<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">rel</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"stylesheet"</span></span><span class="token punctuation">,</span> <span class="token attr-name">href</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"../css/index.css"</span></span><span class="token punctuation">)</span></span></span>    <span class="token tag">body</span>        <span class="token comment">//God cup two-wing layout solution</span>        <span class="token comment">//header start</span>        <span class="token tag">header<span class="token attr-class">.header</span></span> <span class="token plain-text">header</span>        <span class="token comment">//header end</span>        <span class="token comment">// intermediate content section start</span>        <span class="token tag">main<span class="token attr-class">.content</span></span>             <span class="token comment">// main content section start</span>            <span class="token tag">section<span class="token attr-class">.main</span></span>                <span class="token tag">section<span class="token attr-class">.main-wrap</span></span> <span class="token plain-text">main</span>            <span class="token comment">// main content section end</span>            <span class="token comment">// left section start</span>            <span class="token tag">aside<span class="token attr-class">.left</span></span> <span class="token plain-text">left</span>            <span class="token comment">// left section end</span>            <span class="token comment">//right section start</span>            <span class="token tag">aside<span class="token attr-class">.right</span></span> <span class="token plain-text">right</span>            <span class="token comment">//right section end</span>        <span class="token comment">//intermediate content section end</span>        <span class="token comment">//footer start</span>        <span class="token tag">footer<span class="token attr-class">.footer</span></span> <span class="token plain-text">footer</span>        <span class="token comment">//footer end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>###html代码如下</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--God cup two-wing layout solution--&gt;</span>    <span class="token comment">&lt;!--header start--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--header end--&gt;</span>    <span class="token comment">&lt;!-- intermediate content section start--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>         <span class="token comment">&lt;!-- main content section start--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main-wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- main content section end--&gt;</span>        <span class="token comment">&lt;!-- left section start--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- left section end--&gt;</span>        <span class="token comment">&lt;!--right section start--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--right section end--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--intermediate content section end--&gt;</span>    <span class="token comment">&lt;!--footer start--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--footer end--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>###scss代码如下</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">/***代码复用**文字垂直水平居中**采用flex布局*/</span><span class="token selector">.vertical_horizontal_center</span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token comment">/**** create color random*/</span><span class="token comment">// Add the colors to a list</span><span class="token property"><span class="token variable">$list_color</span></span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>82<span class="token punctuation">,</span> 22<span class="token punctuation">,</span> 82<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>100<span class="token punctuation">,</span> 194<span class="token punctuation">,</span> 120<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>80<span class="token punctuation">,</span> 64<span class="token punctuation">,</span> 224<span class="token punctuation">,</span>0.8<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>124<span class="token punctuation">,</span> 167<span class="token punctuation">,</span> 25<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>161<span class="token punctuation">,</span> 158<span class="token punctuation">,</span> 187<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>82<span class="token punctuation">,</span> 22<span class="token punctuation">,</span> 82<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>100<span class="token punctuation">,</span> 194<span class="token punctuation">,</span> 120<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>80<span class="token punctuation">,</span> 64<span class="token punctuation">,</span> 224<span class="token punctuation">,</span>0.8<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>124<span class="token punctuation">,</span> 167<span class="token punctuation">,</span> 25<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>161<span class="token punctuation">,</span> 158<span class="token punctuation">,</span> 187<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Create a mixin to grab a random color from the list</span><span class="token keyword">@mixin</span> <span class="token selector">bg-color </span><span class="token punctuation">{</span>    <span class="token property"><span class="token variable">$random-color</span></span><span class="token punctuation">:</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token variable">$list_color</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span><span class="token function">nth</span><span class="token punctuation">(</span><span class="token variable">$list_color</span><span class="token punctuation">,</span><span class="token variable">$random-color</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*header*/</span> <span class="token selector">.header </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>   <span class="token keyword">@include</span> bg-color<span class="token punctuation">;</span>    <span class="token keyword">@extend</span> .vertical_horizontal_center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*content*/</span><span class="token selector">.content </span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>   <span class="token selector">.main </span><span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token selector">.main-wrap</span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0 200px<span class="token punctuation">;</span>        <span class="token keyword">@include</span> bg-color<span class="token punctuation">;</span>        <span class="token keyword">@extend</span> .vertical_horizontal_center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token selector">.left </span><span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>    <span class="token keyword">@include</span> bg-color<span class="token punctuation">;</span>    <span class="token keyword">@extend</span> .vertical_horizontal_center<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.right </span><span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>    <span class="token keyword">@include</span> bg-color<span class="token punctuation">;</span>    <span class="token keyword">@extend</span> .vertical_horizontal_center<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/* footer*/</span><span class="token selector">.footer </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token keyword">@include</span> bg-color<span class="token punctuation">;</span>    <span class="token keyword">@extend</span> .vertical_horizontal_center<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="css代码如下"><a href="#css代码如下" class="headerlink" title="css代码如下"></a>css代码如下</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@charset</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span></span><span class="token comment">/***代码复用**文字垂直水平居中**采用flex布局*/</span><span class="token selector">.vertical_horizontal_center, .footer, .content .right, .content .left, .content .main .main-wrap, .header</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/**** create color random*/</span><span class="token comment">/*header*/</span><span class="token selector">.header</span> <span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>82<span class="token punctuation">,</span> 22<span class="token punctuation">,</span> 82<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*content*/</span><span class="token selector">.content</span> <span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.content .main</span> <span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.content .main .main-wrap</span> <span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 200px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>80<span class="token punctuation">,</span> 64<span class="token punctuation">,</span> 224<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.content .left</span> <span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>124<span class="token punctuation">,</span> 167<span class="token punctuation">,</span> 25<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.content .right</span> <span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>161<span class="token punctuation">,</span> 158<span class="token punctuation">,</span> 187<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* footer*/</span><span class="token selector">.footer</span> <span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>100<span class="token punctuation">,</span> 194<span class="token punctuation">,</span> 120<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果图如下-1"><a href="#效果图如下-1" class="headerlink" title="效果图如下"></a>效果图如下</h3><p> <a href="https://imgchr.com/i/DIb3cj"><img src="https://s3.ax1x.com/2020/12/02/DIb3cj.png" alt="DIb3cj.png"></a></p><h3 id="缩放效果图如下"><a href="#缩放效果图如下" class="headerlink" title="缩放效果图如下"></a>缩放效果图如下</h3><p><a href="https://imgchr.com/i/DIb13Q"><img src="https://s3.ax1x.com/2020/12/02/DIb13Q.png" alt="DIb13Q.png"></a></p><blockquote><p>优点：解决了圣杯布局带来的缺陷，支持各种宽高变化，通用性强</p></blockquote><blockquote><p>缺点：多加一层DOM结构，导致页面渲染性能下降，加渲染树生成的计算量。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="2020/05/15/she-ji-mo-shi/"/>
      <url>2020/05/15/she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-软件设计模式的概念"><a href="#1-软件设计模式的概念" class="headerlink" title="1. 软件设计模式的概念"></a>1. 软件设计模式的概念</h2><p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。</p><h2 id="2-学习设计模式的意义"><a href="#2-学习设计模式的意义" class="headerlink" title="2. 学习设计模式的意义"></a>2. 学习设计模式的意义</h2><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点。<br>可以提高程序员的思维能力、编程能力和设计能力。<br>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。<br>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</p><p>当然，软件设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，苛能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。<br>软件设计模式的基本要素<br>软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，其中最关键的元素包括以下 4 个主要部分。</p><h3 id="1-模式名称"><a href="#1-模式名称" class="headerlink" title="1. 模式名称"></a>1. 模式名称</h3><p>每一个模式都有自己的名字，通常用一两个词来描述，可以根据模式的问题、特点、解决方案、功能和效果来命名。模式名称（PatternName）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。</p><h3 id="2-问题"><a href="#2-问题" class="headerlink" title="2. 问题"></a>2. 问题</h3><p>问题（Problem）描述了该模式的应用环境，即何时使用该模式。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。</p><h3 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h3><p>模式问题的解决方案（Solution）包括设计的组成成分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的 组合）来解决这个问题。</p><h3 id="4-效果"><a href="#4-效果" class="headerlink" title="4. 效果"></a>4. 效果</h3><p>描述了模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。显式地列出这些效果（Consequence）对理解和评价这些模式有很大的帮助。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS 几种继承实现</title>
      <link href="2020/05/15/li-jie-dui-xiang/"/>
      <url>2020/05/15/li-jie-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="1-面向对象的三大特性"><a href="#1-面向对象的三大特性" class="headerlink" title="1. 面向对象的三大特性"></a>1. 面向对象的三大特性</h2><blockquote><p>封装<br>继承<br>多肽</p></blockquote><h3 id="1-1-原型链的知识"><a href="#1-1-原型链的知识" class="headerlink" title="1.1 原型链的知识"></a>1.1 原型链的知识</h3><blockquote><p>原型链是面向对象的基础，是非常重要的部分。有以下几种知识：</p></blockquote><h2 id="2-创建原型的几种方法"><a href="#2-创建原型的几种方法" class="headerlink" title="2. 创建原型的几种方法"></a>2. 创建原型的几种方法</h2><h3 id="2-1-方式一：字面量"><a href="#2-1-方式一：字面量" class="headerlink" title="2.1 方式一：字面量"></a>2.1 方式一：字面量</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"江小白"</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token string">"江小白"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>上面的两种写法，效果是一样的。因为，第一种写法，obj11会指向Object。</p></blockquote><ul><li><p>第一种写法是：字面量的方式。</p></li><li><p>第二种写法是：内置的构造函数</p><h3 id="2-2-方式二：通过构造函数"><a href="#2-2-方式二：通过构造函数" class="headerlink" title="2.2 方式二：通过构造函数"></a>2.2 方式二：通过构造函数</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">M</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">M</span><span class="token punctuation">(</span>"asd asd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-方法三：Object-create"><a href="#2-3-方法三：Object-create" class="headerlink" title="2.3 方法三：Object.create"></a>2.3 方法三：Object.create</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'lipiao'</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此方法创建的对象是原型链对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>第三种方法,这种方式里，obj3是实例，p是obj3的原型（name是p原型里的属性），构造函数是Objecet 。</p></blockquote><h2 id="3-原型链"><a href="#3-原型链" class="headerlink" title="3. 原型链"></a>3. 原型链</h2><p><a href="https://imgtu.com/i/6uK7on"><img src="https://s3.ax1x.com/2021/03/06/6uK7on.png" alt="6uK7on.png"></a></p><blockquote><ol><li>构造函数通过 new 生成实例</li><li>构造函数也是函数，构造函数的prototype指向原型。（所有的函数有prototype属性，但实例没有 prototype属性）</li><li>原型对象中有 constructor，指向该原型的构造函数<br><a href="https://imgtu.com/i/6ul0MT"><img src="https://s3.ax1x.com/2021/03/06/6ul0MT.png" alt="6ul0MT.png"></a></li><li>实例的__proto__指向原型。也就是说，Foo.<strong>proto</strong> === Foo.prototype。<br>声明：所有的引用类型（数组、对象、函数）都有__proto__这个属性。<br>Foo.<strong>proto</strong> === Function.prototype的结果为true，说明Foo这个普通的函数，是Function构造函数的一个实例。</li></ol></blockquote><h3 id="3-2-原型链"><a href="#3-2-原型链" class="headerlink" title="3.2 原型链"></a>3.2 原型链</h3><p>原型链的基本原理：任何一个实例，通过原型链，找到它上面的原型，该原型对象中的方法和属性，可以被所有的原型实例共享。</p><p>  Object对象是原型链的顶端。</p></li></ul><p>原型可以起到继承的作用。原型里的方法都可以被不同的实例共享：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//给Foo的原型添加 say 函数</span>  <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  原型链的关键：在访问一个实例的时候，如果实例本身没找到此方法或属性，就往原型上找。如果还是找不到，继续往上一级的原型上找。</p><h3 id="3-3-instanceof的原理"><a href="#3-3-instanceof的原理" class="headerlink" title="3.3 instanceof的原理"></a>3.3 instanceof的原理</h3><p><a href="https://imgtu.com/i/6u33Nj"><img src="https://s3.ax1x.com/2021/03/06/6u33Nj.png" alt="6u33Nj.png"></a><br>instanceof的作用：用于判断实例属于哪个构造函数。<br>instanceof的原理：判断实例对象的__proto__属性，和构造函数的prototype属性，是否为同一个引用（是否指向同一个地址）。</p><pre><code>    注意1：虽然说，实例是由构造函数 new 出来的，但是实例的__proto__属性引用的是构造函数的prototype。也就是说，实例的__proto__属性与构造函数本身无关。    注意2：在原型链上，原型的上面可能还会有原型，以此类推往上走，继续找__proto__属性。这条链上如果能找到， instanceof 的返回结果也是 true。</code></pre><p>比如说：</p><p>foo instance of Foo的结果为true，因为foo.<strong>proto</strong> === M.prototype为true。<br>foo instance of Objecet的结果也为true，为Foo.prototype.<strong>proto</strong> === Object.prototype为true。<br>但我们不能轻易的说：foo 一定是 由Object创建的实例`。这句话是错误的。我们来看下一个问题就明白了。</p><h3 id="3-4-分析一个问题"><a href="#3-4-分析一个问题" class="headerlink" title="3.4 分析一个问题"></a>3.4 分析一个问题</h3><blockquote><p>问题：已知A继承了B，B继承了C。怎么判断 a 是由A直接生成的实例，还是B直接生成的实例呢？还是C直接生成的实例呢？</p></blockquote><p>分析：这就要用到原型的constructor属性了。</p><blockquote><p>foo.<strong>proto</strong>.constructor === M的结果为true，但是 foo.<strong>proto</strong>.constructor === Object的结果为false。<br>所以，用 consturctor判断就比用 instanceof判断，更为严谨。</p></blockquote><h2 id="4-new运算符"><a href="#4-new运算符" class="headerlink" title="4. new运算符"></a>4. new运算符</h2><blockquote><p>当new一个对象是发生了什么</p></blockquote><ul><li>创建一个新的空对象实例。</li><li>将此空对象的隐式原型指向其构造函数的显示原型。</li><li>执行构造函数（传入相应的参数，如果没有参数就不用传），同时 this 指向这个新实例。</li><li>如果返回值是一个新对象，那么直接返回该对象；如果无返回值或者返回一个非对象值，那么就将步骤（1）创建的对象返回。</li></ul><h2 id="5-类的定义、类的声明（继承的本质：原型链）"><a href="#5-类的定义、类的声明（继承的本质：原型链）" class="headerlink" title="5 类的定义、类的声明（继承的本质：原型链）"></a>5 类的定义、类的声明（继承的本质：原型链）</h2><h3 id="5-1方式一、用构造函数模拟类-es5"><a href="#5-1方式一、用构造函数模拟类-es5" class="headerlink" title="5.1方式一、用构造函数模拟类(es5)"></a>5.1方式一、用构造函数模拟类(es5)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"xiaoqi"</span><span class="token punctuation">;</span><span class="token comment">//通过this，表明这是一个构造函数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-2方式二、用class声明（es6-的写法"><a href="#5-2方式二、用class声明（es6-的写法" class="headerlink" title="5.2方式二、用class声明（es6)的写法"></a>5.2方式二、用class声明（es6)的写法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//可以在构造函数里写属性</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-类的实列化"><a href="#5-3-类的实列化" class="headerlink" title="5.3 类的实列化"></a>5.3 类的实列化</h3><p>类的实例化很简单，直接 new 出来即可。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-4继承的几种方式"><a href="#5-4继承的几种方式" class="headerlink" title="5.4继承的几种方式"></a>5.4继承的几种方式</h3><blockquote><p>继承的本质是原型链，<br>继承是面向对象语言的基础概念，一般面向对象语言支持两种继承方式：接口继承和实现继承。接口继承只继承方法签名，而实现继承则继承实际的方法。ECMAScript中函数没有签名，因此无法实现接口继承。ECMAScript只支持实现继承，而其实现继承主要是靠原型链来实现。</p></blockquote><h4 id="5-4-1-原型链"><a href="#5-4-1-原型链" class="headerlink" title="5.4.1 原型链"></a>5.4.1 原型链</h4><blockquote><p>原理：让一个引用类型继承另一个引用类型的方法和属性</p></blockquote><p>具体实现如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 父类</span><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"xiaoqi"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"zhuzhu"</span><span class="token punctuation">,</span><span class="token string">"chouzhu"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getChildren</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>childen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 子类</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child1<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"hanhanzhu"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Array ["zhuzhu", "chouzhu", "hanhanzhu"]</span><span class="token keyword">var</span> child2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Array ["hanhan", "chouzhu"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>优点</p></blockquote><ul><li>父类新增原型方法/原型属性，子类都能访问到</li><li>简单，易于实现<blockquote><p>缺点</p></blockquote></li><li>无法实现多继承</li><li>引用类型的属性被所有实例共享</li><li> 在创建Child的实例的时候，不能向Parent传参</li></ul><h4 id="5-4-2-盗用构造函数"><a href="#5-4-2-盗用构造函数" class="headerlink" title="5.4.2 盗用构造函数"></a>5.4.2 盗用构造函数</h4><p>原理：使用apply()和call()方法以新对象为上下文执行构造函数，子类构造函数内部调用超类构造函数</p><p>具体实现如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//盗用构造函数</span><span class="token comment">// 父类 </span><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment">//  子类</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">"xiaoqi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"xiaopiao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//["red","yellow","xiaopiao"]</span><span class="token keyword">var</span> child2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">"xiaopiao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child2<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"xiaoqi"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token comment">//["red","yellow","xiaoqi"] </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 优点</p></blockquote><ul><li>避免了引用类型的属性被所有实列共享，可以向父级传递参数</li><li>解决了原型链继承中子类实例共享父类引用属性的问题<br>创建子类实例时，可以向父类传递参数<br>可以实现多继承(call多个父类对象)<blockquote><p>缺点</p></blockquote></li><li>只能继承父类的实例属性和方法，不能继承原型属性和方法</li><li>每次实列都会创建一遍方法，函数复用是一个问题</li></ul><h4 id="5-4-3-组合继承（原型链-借用构造函数的组合继承）"><a href="#5-4-3-组合继承（原型链-借用构造函数的组合继承）" class="headerlink" title="5.4.3 组合继承（原型链+借用构造函数的组合继承）"></a>5.4.3 组合继承（原型链+借用构造函数的组合继承）</h4><p>原理：通过借用构造函数实现对实例属性的继承。这样，既能够保证能够通过原型定义的方法实现函数复用，又能够保证每个实例有自己的属性</p><p>具体实现如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//  组合继承（原型链+借用构造函数的组合继承）</span><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"parent"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getColors</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 子类</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>grade</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token comment">//创建子类实列会折行一次</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定子类原型会执行一次</span><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token punctuation">;</span><span class="token comment">//校正构造函数</span><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">"xiaoqi"</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出：“Parent”,"Parent","xiaoqi"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>优点</p></blockquote><ul><li>可以继承实例属性/方法，也可以继承原型属性/方法</li><li>不存在引用属性共享问题</li><li>可传参</li><li>函数可复用<blockquote><p>缺点</p></blockquote></li><li>创建子类时会调用两次超类的构造函数</li></ul><h4 id="5-4-4-原型式继承"><a href="#5-4-4-原型式继承" class="headerlink" title="5.4.4 原型式继承"></a>5.4.4 原型式继承</h4><p>原理：借助原型可以基于已有的对象创建新对象，同时还不比因此创建自定义类型</p><p>具体实现如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在object()函数内部，先创建了一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回这个临时类型的一个新实例。本质上object()就是完成了一次浅复制操作</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">"xiaoqi"</span><span class="token punctuation">,</span>    friends<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"piaopiao"</span><span class="token punctuation">,</span><span class="token string">"xiaopiao"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1<span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"xiaopiao"</span>p1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"heihei"</span><span class="token punctuation">)</span><span class="token keyword">var</span> p2<span class="token operator">=</span><span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"xiaoqi"</span>p2<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>friends<span class="token punctuation">)</span><span class="token comment">//["piaopiao","xiaoxiao","heihei","haha"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ECMAScript5通过新增Object.create()方法规范化了原型式继承，这个方法接收两个参数：一个用作新对象原型的对象和为新对象定义属性的对象</p></blockquote><ul><li>注意Object.create()有两个参数，第二个与Object.defineProperties()的第二个参数一样</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">"xiaoqi"</span><span class="token punctuation">,</span>    friends<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"piaopiao"</span><span class="token punctuation">,</span><span class="token string">"xiaopiao"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1<span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"xiaopiao"</span>p1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"heihei"</span><span class="token punctuation">)</span><span class="token keyword">var</span> p2<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"xiaoqi"</span>p2<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>friends<span class="token punctuation">)</span><span class="token comment">//["piaopiao","xiaoxiao","heihei","haha"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-4-5-寄生式继承"><a href="#5-4-5-寄生式继承" class="headerlink" title="5.4.5 寄生式继承"></a>5.4.5 寄生式继承</h4><p>寄生式继承是与原型式继承紧密相关的一种思路，即创建一个仅用于封装继承函数过程的函数，该函数在内部以某种方式来增强对象，最后返回对象</p><p>具体实现如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> clone <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建新对象</span>    clone<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello, world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 增强对象，添加属性或法,这里导致方法难以复用问题</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> clone<span class="token punctuation">;</span> <span class="token comment">// 返回新对象</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'alice'</span><span class="token punctuation">,</span>    friends<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'Sherly'</span><span class="token punctuation">,</span> <span class="token string">'Taissy'</span><span class="token punctuation">,</span> <span class="token string">'Vant'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&gt;</span> <span class="token string">"hello, world"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-4-6-寄生组合式继承"><a href="#5-4-6-寄生组合式继承" class="headerlink" title="5.4.6 寄生组合式继承"></a>5.4.6 寄生组合式继承</h4><p>合继承是 JavaScript最常用的继承模式，其最大的问题是不管在什么情况下都会调用两次超类构造函数：一次是在创建子类原型时，一次是在子类型构造函数内部。子类型最终会包含超类的全部实例属性。<br>所谓寄生组合式继承，即通过构造函数来继承属性，通过原型链继承方法，背后的基本思路是：不必为了指定子类的原型而调用超类的构造函数，我们所需要的无非就是超类原型的一个副本而已</p><p>具体实现如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'parent'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>grade</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 寄生组合的方式</span><span class="token comment">// 复制父类的原型对象</span><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> original<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//创建父类的原型副本，改变子类的原型，同时纠正构造函数</span><span class="token keyword">function</span> <span class="token function">inherit</span><span class="token punctuation">(</span><span class="token parameter">subClass<span class="token punctuation">,</span>superClass</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> parent <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>superClass<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>    parent<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subClass<span class="token punctuation">;</span>    subClass<span class="token punctuation">.</span>prototype <span class="token operator">=</span> parent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">inherit</span><span class="token punctuation">(</span>Child<span class="token punctuation">,</span>Parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">"xiaoqi"</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token comment">// ‘parent’</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>寄生组合继承的高效率在于它只调用了一次超类构造函数，同时还能够保持原型链不变，能够正常使用 instanceof 和 isPrototypeOf() 寄生组合继承被普遍认为是引用类型最理想的继承方式</p></blockquote><h4 id="5-4-7-增强型寄生组合继承"><a href="#5-4-7-增强型寄生组合继承" class="headerlink" title="5.4.7 增强型寄生组合继承"></a>5.4.7 增强型寄生组合继承</h4><blockquote><p>寄生组合式继承能够很完美地实现继承，但也不是没有缺点。inherit() 方法中复制了父类的原型，赋给子类，假如子类原型上有自定的方法，也会被覆盖，因此可以通过Object.defineProperty的方式，将子类原型上定义的属性或方法添加到复制的原型对象上，如此，既可以保留子类的原型对象的完整性，又能够复制父类原型</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">inherit</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> parent<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>constructor <span class="token operator">=</span> child<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> child<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">{</span>        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>            value<span class="token operator">:</span> child<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">inherit</span><span class="token punctuation">(</span>Child<span class="token punctuation">,</span>Parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">"xiaoqi"</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token comment">// ‘parent’</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-4-8-ES6中class-的继承"><a href="#5-4-8-ES6中class-的继承" class="headerlink" title="5.4.8 ES6中class 的继承"></a>5.4.8 ES6中class 的继承</h4><p>S6中引入了class关键字，class可以通过extends关键字实现继承，还可以通过static关键字定义类的静态方法,这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。</p><p>ES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。</p><ul><li>class关键字只是原型的语法糖，JavaScript继承仍然是基于原型实现的</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>            <span class="token comment">//调用类的构造方法</span>            <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name                <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age            <span class="token punctuation">}</span>            <span class="token comment">//定义一般的方法</span>            <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"调用父类的方法"</span><span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'kobe'</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>        <span class="token comment">//定义一个子类</span>        <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>            <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> salary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token comment">//通过super调用父类的构造方法</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary            <span class="token punctuation">}</span>            <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//在子类自身定义方法</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"调用子类的方法"</span><span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'wade'</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">1000000000</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>        s1<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>继承方式</th><th>优点</th><th>缺陷</th></tr></thead><tbody><tr><td>原型链继承</td><td>能够实现函数复用</td><td>1.引用类型的属性被所有实例共享；2.创建子类时不能向超类传参</td></tr><tr><td>借用构造函数</td><td>1. 避免了引用类型的属性被所有实例共享; 2. 可以在子类中向超类传参</td><td>方法都在构造函数中定义了，每次创建实例都会创建一遍方法，无法实现函数复用</td></tr><tr><td>组合继承</td><td>融合了原型链继承和构造函数的优点，是Javascript中最常用的继承模式</td><td>创建子类会调用两次超类的构造函数</td></tr><tr><td>原型继承</td><td>在没有必要兴师动众地创建构造函数，而只是想让一个对象与另一个对象保持类似的情况下，原型式继承完全可以胜任</td><td>引用类型的属性会被所有实例共享</td></tr><tr><td>寄生式继承</td><td>可以增强对象</td><td>使用寄生式继承来为对象添加函数，会由于不能做到函数复用造成效率降低，这一点与构造函数模式类似；同时存在引用类型的属性被所有实例共享的缺陷</td></tr><tr><td>寄生组合继承</td><td>使用寄生式继承来为对象添加函数，会由于不能做到函数复用造成效率降低，这一点与构造函数模式类似；同时存在引用类型的属性被所有实例共享的缺陷</td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
